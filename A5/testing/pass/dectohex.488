%
% Convert number to hexadecimal
%

% Trial #1
% @input=108
%
% @output=6C

% Trial #2
% @input=153
%
% @output=99

% Trial #3
% @input=307
%
% @output=133

% Trial #4
% @input=318
%
% @output=13E

% Trial #5
% @input=341
%
% @output=155

% Trial #6
% @input=533
%
% @output=215

% Trial #7
% @input=578
%
% @output=242

% Trial #8
% @input=622
%
% @output=26E

% Trial #9
% @input=650
%
% @output=28A

% Trial #10
% @input=868
%
% @output=364

% End trials
% @input=-1
% @output=done

{
  func w0():integer{put "0" result 0}
  func w1():integer{put "1" result 0}
  func w2():integer{put "2" result 0}
  func w3():integer{put "3" result 0}
  func w4():integer{put "4" result 0}
  func w5():integer{put "5" result 0}
  func w6():integer{put "6" result 0}
  func w7():integer{put "7" result 0}
  func w8():integer{put "8" result 0}
  func w9():integer{put "9" result 0}
  func wA():integer{put "A" result 0}
  func wB():integer{put "B" result 0}
  func wC():integer{put "C" result 0}
  func wD():integer{put "D" result 0}
  func wE():integer{put "E" result 0}
  func wF():integer{put "F" result 0}
  proc puthex(i : integer){
    i := 
    (i<8?
      (i<4?
        (i<2?(i=0?w0():w1())
            :(i=2?w2():w3()))
       :(i<6?(i=4?w4():w5())
            :(i=6?w6():w7())))
     :(i<12?(i<10?(i=8?w8():w9())
            :(i=10?wA():wB()))
       :(i<14?(i=12?wC():wD())
            :(i=14?wE():wF()))))
  }
  while true do {
    var n,i,d[4] : integer
   
    get n
    if n < 0 then exit fi

    i := 1
    while i <= 4 do
      d[i] := n - n/16*16
      n := n/16
      i := i +1
    end
    i := 4
    repeat i := i - 1 until i = 1 or d[i] not= 0
    while i > 0 do
      puthex(d[i])
      i := i - 1
    end
    put newline
  } end

  put "done"
}
