%
% Four function calculator
%

% Trial #1: 2 + 2
% @output=value: 0
% @output=select operation: + - * / neg exit
% @output=                  1 2 3 4 5   0
% @input=1
% @input=2
% @output=select(0-4): input number: value: 2
%
% @output=select operation: + - * / neg exit
% @output=                  1 2 3 4 5   0
% @input=1
% @input=2
% @output=select(0-4): input number: value: 4

% Set value to 1
% @output=select operation: + - * / neg exit
% @output=                  1 2 3 4 5   0
% @input=2
% @input=3
% @output=select(0-4): input number: value: 1

% Trial #2: 5 * 5
% @output=select operation: + - * / neg exit
% @output=                  1 2 3 4 5   0
% @input=3
% @input=5
% @output=select(0-4): input number: value: 5
%
% @output=select operation: + - * / neg exit
% @output=                  1 2 3 4 5   0
% @input=3
% @input=5
% @output=select(0-4): input number: value: 25

% Exit calculator
% @output=select operation: + - * / neg exit
% @output=                  1 2 3 4 5   0
% @input=0
% @output=select(0-4): bye!

{
  func getop() : integer {
    var i : integer
    put "select operation: + - * / neg exit",newline
    put "                  1 2 3 4 5   0",newline
    repeat
      put "select(0-4): "
      get i
    until i <= 5 and i >= 0
    result i
  }
  func getnum() : integer {
    var i : integer
    put "input number: "
    get i
    result i
  }
  var acc : integer
  proc doop(op:integer, arg:integer) {
    if op = 1 then
      acc := acc + arg
      return
    fi
    if op = 2 then
      acc := acc - arg
      return
    fi
    if op = 3 then
      acc := acc * arg
      return
    fi
    if op = 4 then
      acc := acc / arg
      return
    fi
  }
  acc := 0
  while true do{
    var op:integer
    put "value: ",acc,newline
    op := getop()
    exit when op = 0
    if op = 5 then
      acc := - acc
    else
      doop(op,getnum())
    fi
  }end
  put "bye!",newline
}
