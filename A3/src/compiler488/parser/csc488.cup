// CSC488S Winter 2013/2014  
//
// File:  csc488.cup
//
// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.

import compiler488.ast.ASTList;
import compiler488.ast.Readable;
import compiler488.ast.SourceLoc;
import compiler488.ast.Printable;

import compiler488.ast.decl.ScalarDecl;
import compiler488.ast.decl.Declaration;
import compiler488.ast.decl.RoutineDecl;
import compiler488.ast.decl.ArrayDeclPart;
import compiler488.ast.decl.ScalarDeclPart;
import compiler488.ast.decl.DeclarationPart;
import compiler488.ast.decl.MultiDeclarations;

import compiler488.ast.type.Type;
import compiler488.ast.type.BooleanType;
import compiler488.ast.type.IntegerType;

import compiler488.ast.stmt.Scope;
import compiler488.ast.stmt.Stmt;
import compiler488.ast.stmt.IfStmt;
import compiler488.ast.stmt.Program;
import compiler488.ast.stmt.PutStmt;
import compiler488.ast.stmt.GetStmt;
import compiler488.ast.stmt.ExitStmt;
import compiler488.ast.stmt.ResultStmt;
import compiler488.ast.stmt.ReturnStmt;
import compiler488.ast.stmt.AssignStmt;
import compiler488.ast.stmt.WhileDoStmt;
import compiler488.ast.stmt.RepeatUntilStmt;
import compiler488.ast.stmt.ProcedureCallStmt;

import compiler488.ast.expn.Expn;
import compiler488.ast.expn.NotExpn;
import compiler488.ast.expn.SubsExpn;
import compiler488.ast.expn.BoolExpn;
import compiler488.ast.expn.IdentExpn;
import compiler488.ast.expn.ArithExpn;
import compiler488.ast.expn.ConstExpn;
import compiler488.ast.expn.VarRefExpn;
import compiler488.ast.expn.BinaryExpn;
import compiler488.ast.expn.EqualsExpn;
import compiler488.ast.expn.CompareExpn;
import compiler488.ast.expn.IntConstExpn;
import compiler488.ast.expn.BoolConstExpn;
import compiler488.ast.expn.TextConstExpn;
import compiler488.ast.expn.UnaryMinusExpn;
import compiler488.ast.expn.ConditionalExpn;
import compiler488.ast.expn.NewlineConstExpn;
import compiler488.ast.expn.FunctionCallExpn;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;
	
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */
   
            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}
   
    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException						*/
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
        report_error (message, info);
        throw new SyntaxErrorException (lastError); 
	}
   
:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2013/2014 

// Terminals returned by the scanner with no value attached.  
terminal 	BOOLEAN,	INTEGER,	DO	;
terminal	ELSE,	END,	EXIT,   FI,	FORWARD, FUNC	;
terminal	IF,	GET, 	PROCEDURE,	PUT	;
terminal	WHILE,	REPEAT,	UNTIL,	VAR,	NEWLINE	;
terminal	RESULT,	RETURN,	THEN,	WHEN	;

// Special-character terminals, no value attached
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY  	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT, COLON	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE, QUESTION	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

nonterminal Program program;
nonterminal Scope scope;

nonterminal ASTList<Stmt> statements;
nonterminal ASTList<Declaration> declarations;

nonterminal Stmt statement;
nonterminal Declaration declaration;

nonterminal ASTList<Printable> outputs;
nonterminal	Printable output;

nonterminal ASTList<Readable> inputs;

nonterminal ASTList<DeclarationPart> variablenames;
nonterminal DeclarationPart variablename;
nonterminal Integer generalBound;
nonterminal Integer[] bound;

nonterminal RoutineDecl functionHead;
nonterminal RoutineDecl procedureHead;

nonterminal Expn expression;
nonterminal VarRefExpn variable;
nonterminal Expn conjunction;
nonterminal Expn negation;
nonterminal Expn compareExpn;
nonterminal	Expn arithExpn;
nonterminal Expn term;
nonterminal Expn factor;
nonterminal	Expn primary;

nonterminal ASTList<Expn> argumentList;
nonterminal ASTList<Expn> arguments;

nonterminal	ASTList<ScalarDecl> parameterList;
nonterminal	ASTList<ScalarDecl> parameters;
nonterminal	ScalarDecl parameter;

nonterminal ConstExpn constant;

nonterminal Type type;

// CSC488S PLEASE NOTE: your grammar CAN NOT use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program
        ::= scope:scope                                                         // the main program
                {: RESULT = new Program(scope, new SourceLoc(scope)); :}
        ;

scope
        ::= L_CURLEY:_start declarations:decls statements:stmts R_CURLEY:_end   // scope with declarations and statement
                {: RESULT = new Scope(decls, stmts, new SourceLoc(_startleft, _startright, _endleft, _endright + 1)); :}

        |   L_CURLEY:_start statements:stmts R_CURLEY:_end                      // scope with statments only
                {: RESULT = new Scope(null, stmts, new SourceLoc(_startleft, _startright, _endleft, _endright + 1)); :}

        |   L_CURLEY:_start R_CURLEY:_end                                       // empty scope
                {: RESULT = new Scope(null, null, new SourceLoc(_startleft, _startright, _endleft, _endright + 1)); :}
        ;

statements
        ::= statement:stmt
                {: RESULT = new ASTList<Stmt>(stmt); :}

        |   statements:head statement:tail                          // sequence of statements
                {: RESULT = head.addLast(tail); :}
        ;

declarations
        ::= declaration:stmt
                {: RESULT = new ASTList<Declaration>(stmt); :}

        |   declarations:head declaration:tail                      // sequence of declarations
                {: RESULT = head.addLast(tail); :}
        ;

statement
        ::= variable:lval COLON EQUAL expression:rval                                                       // assignment statement
                {: RESULT = new AssignStmt(lval, rval, new SourceLoc(lval, rval)); :}

		|   IF:_start expression:condition THEN statements:whenTrue FI:_end                                 // if-then statements
                {: RESULT = new IfStmt(condition, whenTrue, new SourceLoc(_startleft, _startright, _endleft, _endright + 2)); :}
		
        |   IF:_start expression:condition THEN statements:whenTrue ELSE statements:whenFalse FI:_end       // if-then-else statements
                {: RESULT = new IfStmt(condition, whenTrue, whenFalse, new SourceLoc(_startleft, _startright, _endleft, _endright + 2)); :}

        |   WHILE:_start expression:condition DO statements:body END:_end                                   // while statement
                {: RESULT = new WhileDoStmt(body, condition, new SourceLoc(_startleft, _startright, _endleft, _endright + 3)); :}

        |   REPEAT:_start statements:body UNTIL expression:condition                                        // repeat statement
                {: RESULT = new RepeatUntilStmt(body, condition, new SourceLoc(_startleft, _startright, condition)); :}

        |   EXIT:_start                                                                                     // exit statement (no conditional)
                {: RESULT = new ExitStmt(new SourceLoc(_startleft, _startright, "exit")); :}

        |   EXIT:_start WHEN expression:condition                                                           // exit statement (with conditional)
                {: RESULT = new ExitStmt(condition, new SourceLoc(_startleft, _startright, condition)); :}

        |   RESULT:_start expression:value                                                                  // return from function
                {: RESULT = new ResultStmt(value, new SourceLoc(_startleft, _startright, value)); :}

        |   RETURN:_start                                                                                   // return from procedure
                {: RESULT = new ReturnStmt(new SourceLoc(_startleft, _startright, "return")); :}

        |   PUT:_start outputs:outputs                                                                      // output statement
                {: RESULT = new PutStmt(outputs, new SourceLoc(_startleft, _startright, outputs)); :}

        |   GET:_start inputs:inputs                                                                        // input statement
                {: RESULT = new GetStmt(inputs, new SourceLoc(_startleft, _startright, inputs)); :}

        |   IDENT:name L_PAREN argumentList:arguments R_PAREN:_end                                          // call procedure
                {: RESULT = new ProcedureCallStmt(name, arguments, new SourceLoc(nameleft, nameright, _endleft, _endright + 1)); :}

        |   scope:scope                                                                                     // embedded scope
                {: RESULT = scope; :}
		;

declaration
        ::= VAR:_start variablenames:vars COLON type:type       // declare scalar/array variables
                {: RESULT = new MultiDeclarations(vars, type, new SourceLoc(_startleft, _startright, type)); :}

        |   functionHead:func scope:body                        // function declaration
                {:  RESULT = func.withBody(body, new SourceLoc(func, body)); :}
        
        |   procedureHead:proc scope:body                       // procedure declaration
                {:  RESULT = proc.withBody(body, new SourceLoc(proc, body)); :}

        |   FORWARD functionHead:func                           // forward function declaration
                {:  RESULT = func; :}
        
        |   FORWARD procedureHead:proc                          // forward procedure declaration
                {:  RESULT = proc; :}
		;

variablenames
        ::= variablename:var                                    // list of variables being declared
                {: RESULT = new ASTList<DeclarationPart>().addLast(var); :}
        
        |   variablenames:head COMMA variablename:tail
                {: RESULT = head.addLast(tail); :}
        ;

variablename
        ::= IDENT:id                                                    // scalar variable
                {: RESULT = new ScalarDeclPart(id, new SourceLoc(idleft, idright, id)); :}

        |   IDENT:id L_SQUARE bound:b R_SQUARE:_end                     // 1 dimensional array
                {: RESULT = new ArrayDeclPart(id, b[0], b[1], new SourceLoc(idleft, idright, _endleft, _endright + 1)); :}

        |   IDENT:id L_SQUARE bound:b1 COMMA bound:b2 R_SQUARE:_end     // 1 dimensional array
                {: RESULT = new ArrayDeclPart(id, b1[0], b1[1], b2[0], b2[1], new SourceLoc(idleft, idright, _endleft, _endright + 1)); :}
        ;

bound
        ::= INTCONST:ub                                     // integer array bound
                {: RESULT = new Integer[]{ 1, ub }; :}

        |   generalBound:lb DOT DOT generalBound:ub
                {: RESULT = new Integer[]{ lb, ub }; :}
        ;

generalBound
        ::= INTCONST:i                                      // positive array bound
                {: RESULT = i; :}

        |   MINUS INTCONST:i                                // negative array bound
                {: RESULT = -i; :}
        ;

type
        ::= INTEGER:_start                                                                      // integer type
                {: RESULT = new IntegerType(new SourceLoc(_startleft, _startright, "integer")); :}

        |   BOOLEAN:_start                                                                      // boolean type
                {: RESULT = new BooleanType(new SourceLoc(_startleft, _startright, "boolean")); :}
        ;

functionHead
        ::= FUNC:_start IDENT:id L_PAREN parameterList:params R_PAREN COLON type:returnType     // function head
                {: RESULT = new RoutineDecl(id, returnType, params, new SourceLoc(_startleft, _startright, returnType)); :}
        ;

procedureHead
        ::= PROCEDURE:_start IDENT:id L_PAREN parameterList:params R_PAREN:_end                 // function head
                {: RESULT = new RoutineDecl(id, Type.TYPE_NIL, params, new SourceLoc(_startleft, _startright, _endleft, _endright + 1)); :}
        ;

outputs
        ::= output:output                                               // list of output expressions
                {: RESULT = new ASTList<Printable>().addLast(output); :}

        |   outputs:head COMMA output:tail
                {: RESULT = head.addLast(tail); :}
        ;

output
        ::= expression:expr                                             // integer expression
                {: RESULT = expr; :}

        |   TEXTCONST:text                                              // text constant
                {: RESULT = new TextConstExpn(text, new SourceLoc(textleft, textright, text)); :}

        |   NEWLINE:_start                                              // newline constant
                {: RESULT = new NewlineConstExpn(new SourceLoc(_startleft, _startright)); :}
        ;

inputs
        ::= variable:var                                                // list of variables being read into
                {: RESULT = new ASTList<Readable>().addLast(var); :}
        |   inputs:head COMMA variable:tail
                {: RESULT = head.addLast(tail); :}
        ;

argumentList
        ::= arguments:arguments                                         // function/procedure arguments
                {: RESULT = arguments; :}

        |   // EMPTY
                {: RESULT = new ASTList<Expn>(); :}
        ;

arguments
        ::= expression:expr
                {: RESULT = new ASTList<Expn>().addLast(expr); :}

        |   arguments:head COMMA expression:tail                        // list of function/procedure arguments
                {: RESULT = head.addLast(tail); :}
        ;

parameterList
        ::= parameters:parameters                                       //  function/procedure formal parameters
                {: RESULT = parameters; :}

        |   // EMPTY
                {: RESULT = new ASTList<ScalarDecl>(); :}
		;

parameters
        ::= parameter:parameter                                         // list of function/procedure formal parameters
                {: RESULT = new ASTList<ScalarDecl>().addLast(parameter); :}

        |   parameters:head COMMA parameter:tail
                {: RESULT = head.addLast(tail); :}
        ;

parameter
        ::= IDENT:name COLON type:type                                  // declare one parameter
                {: RESULT = new ScalarDecl(name, type, new SourceLoc(nameleft, nameright, type)); :}
        ;

expression
        ::= conjunction:expr                                            // disjunctions, associate left-to-right
                {: RESULT = expr; :}

        |   expression:left OR conjunction:right
                {: RESULT = new BoolExpn(BoolExpn.OP_OR, left, right, new SourceLoc(left, right)); :}
		;

conjunction
        ::= negation:expr                                               // conjunctions, associate left-to-right
                {: RESULT = expr; :}

        |   conjunction:left AND negation:right
                {: RESULT = new BoolExpn(BoolExpn.OP_AND, left, right, new SourceLoc(left, right)); :}
        ;

negation
        ::= compareExpn:expr                                            // negations
                {: RESULT = expr; :}

        |   NOT:_start negation:expr
                {: RESULT = new NotExpn(expr, new SourceLoc(_startleft, _startright, expr)); :}
        ;

compareExpn
        ::= arithExpn:expr                                              // comparisons, do not associate
                {: RESULT = expr; :}

        |   arithExpn:left EQUAL arithExpn:right
                {: RESULT = new EqualsExpn(EqualsExpn.OP_EQUAL, left, right, new SourceLoc(left, right)); :}

        |   arithExpn:left NOT EQUAL arithExpn:right
                {: RESULT = new EqualsExpn(EqualsExpn.OP_NOT_EQUAL, left, right, new SourceLoc(left, right)); :}

        |   arithExpn:left LESS arithExpn:right
                {: RESULT = new CompareExpn(CompareExpn.OP_LESS, left, right, new SourceLoc(left, right)); :}

        |   arithExpn:left LESS EQUAL arithExpn:right
                {: RESULT = new CompareExpn(CompareExpn.OP_LESS_EQUAL, left, right, new SourceLoc(left, right)); :}

        |   arithExpn:left GREATER EQUAL arithExpn:right
                {: RESULT = new CompareExpn(CompareExpn.OP_GREATER_EQUAL, left, right, new SourceLoc(left, right)); :}

        |   arithExpn:left GREATER arithExpn:right
                {: RESULT = new CompareExpn(CompareExpn.OP_GREATER, left, right, new SourceLoc(left, right)); :}
        ;

arithExpn
        ::= term:expr                                                   // expressions, associate + , - left-to-right
                {: RESULT = expr; :}

        |   arithExpn:left PLUS term:right
                {: RESULT = new ArithExpn(ArithExpn.OP_PLUS, left, right, new SourceLoc(left, right)); :}
 
        |   arithExpn:left MINUS term:right
                {: RESULT = new ArithExpn(ArithExpn.OP_MINUS, left, right, new SourceLoc(left, right)); :}
        ;

term
        ::= factor:expr                                                 // terms, associate * , /   left-to-right
                {: RESULT = expr; :}

        |   term:left TIMES factor:right
                {: RESULT = new ArithExpn(ArithExpn.OP_TIMES, left, right, new SourceLoc(left, right)); :}

        |   term:left DIVIDE factor:right
                {: RESULT = new ArithExpn(ArithExpn.OP_DIVIDE, left, right, new SourceLoc(left, right)); :}
        ;

factor
        ::= primary:expr
                {: RESULT = expr; :}

        |   MINUS:_start factor:expr                                    // unary minus
                {: RESULT = new UnaryMinusExpn(expr, new SourceLoc(_startleft, _startright, expr)); :}
        ;

primary
        ::= constant:expr                                               // integer or boolean constant
                {: RESULT = expr; :}

        |   variable:expr                                               // scalar, array element 
                {: RESULT = expr; :}

        |   L_PAREN expression:expr R_PAREN                             // parenthesized expression
                {: RESULT = expr; :}

        |   L_PAREN:_start expression:condition QUESTION:s expression:trueValue COLON expression:falseValue R_PAREN:_end    // conditional expression
                {: RESULT = new ConditionalExpn(condition, trueValue, falseValue, new SourceLoc(_startleft, _startright + 1)); :}

        |   IDENT:name L_PAREN argumentList:arguments R_PAREN:_end      // function call
                {: RESULT = new FunctionCallExpn(name, arguments, new SourceLoc(nameleft, nameright, _endleft, _endright + 1)); :}
        ;

constant
        ::= INTCONST:i                                                  // integer constant
                {: RESULT = new IntConstExpn(i, new SourceLoc(ileft, iright)); :}

        |   TRUE:_start                                                 // constant true
                {: RESULT = new BoolConstExpn(true, new SourceLoc(_startleft, _startright, "true")); :}

        |   FALSE:_start                                                // constant false
                {: RESULT = new BoolConstExpn(false, new SourceLoc(_startleft, _startright, "false")); :}
        ;

variable
        ::= IDENT:id                                                                // scalar variable or parameter
                {: RESULT = new IdentExpn(id, new SourceLoc(idleft, idright, id)); :}

        |   IDENT:id L_SQUARE expression:sub1 R_SQUARE:_end                         // element of 1 dimensional array
                {: RESULT = new SubsExpn(id, sub1, new SourceLoc(idleft, idright, _endleft, _endright + 1)); :}

        |   IDENT:id L_SQUARE expression:sub1 COMMA expression:sub2 R_SQUARE:_end   // element of 2 dimensional array
                {: RESULT = new SubsExpn(id, sub1, sub2, new SourceLoc(idleft, idright, _endleft, _endright + 1)); :}
        ;

/* The End */

