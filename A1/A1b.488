% A program using arrays including both forms of array declaration, positive
% and negative bounds

{
    var xs [ 10 ] : integer
    var ys [ 2 .. 10 ] : integer
    var zs [ -3 .. 10 ] : integer

    % NB: two distinct tokens in `bound` parse rule definition
    var ps [ - 5 . . - 1 ] : integer

    % "Lower bound must be less than or equal to the upper bound"
    var qs [ 4 .. 4 ] : integer

    var area1 [ 10, 10 ] : integer
    var area2 [ 10, 2 .. 9 ] : integer
    var area3 [ 2 .. 9, 10 ] : integer
    var area4 [ 10, -1 .. 9 ] : integer
    var area5 [ -1 .. 9, 10 ] : integer
    var area6 [ 2 .. 9, -1 .. 9 ] : integer
    var area7 [ -1 .. 9, 2 .. 9 ] : integer
    var area8 [ -9 .. -1, -8 .. -2 ] : integer

    % Declare two arrays of the same type but different dimensions
    var combo1 [ 10, 10 ], combo2 [ -10 .. 10, 5 .. 10 ] : integer


    % 1D array assignments
    xs[1] := 1
    xs[10] := 10

    ys[2] := 2
    ys[10] := 10

    zs[-3] := -3
    zs[10] := 10

    
    % 2D array assignments
    % [ min1, min2 ], [ max1, min2 ], [ max1, max2 ], [ min1, max2 ]

    area1[ 1, 1 ] := 1
    area1[ 10, 1 ] := 2
    area1[ 10, 10 ] := 3
    area1[ 1, 10 ] := 4

    area2[ 1, 2 ] := 1
    area2[ 10, 2 ] := 2
    area2[ 10, 9 ] := 3
    area2[ 1, 9 ] := 4

    area3[ 2, 1 ] := 1
    area3[ 9, 1 ] := 2
    area3[ 9, 10 ] := 3
    area3[ 2, 10 ] := 4

    area4[ 1, -1 ] := 1
    area4[ 10, -1 ] := 2
    area4[ 10, 9 ] := 3
    area4[ 1, 9 ] := 4

    area5[ -1, 1 ] := 1
    area5[ 9, 1 ] := 2
    area5[ 9, 10 ] := 3
    area5[ -1, 10 ] := 4

    area6[ 2, -1 ] := 1
    area6[ 9, -1 ] := 2
    area6[ 9, 9 ] := 3
    area6[ 2, 9 ] := 4

    area7[ -1, 2 ] := 1
    area7[ 9, 2 ] := 2
    area7[ 9, 9 ] := 3
    area7[ -1, 9 ] := 4

    area8[ -9, -8 ] := 1
    area8[ -1, -8 ] := 2
    area8[ -1, -2 ] := 3
    area8[ -9, -2 ] := 4
}

